
        "class Solution:\n",
        "    def transpose(self, matrix: List[List[int]]) -> List[List[int]]:\n",
        "        value = [list(num) for num in zip(*matrix)]\n",
        "        return value\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t = int(input())\n",
        "for _ in range(t):\n",
        "    x, y, a = map(int, input().split())\n",
        "    depth = 0  # initially, nothing is dug\n",
        "\n",
        "    while True:\n",
        "        depth += x  # Little B digs\n",
        "        if depth > a + 0.5:\n",
        "            print(\"NO\")\n",
        "            break\n",
        "        depth += y  # Little K digs\n",
        "        if depth > a + 0.5:\n",
        "            print(\"YES\")\n",
        "            break\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 245
        },
        "id": "OQ7ro0k9MyZR",
        "outputId": "aa42d57b-04af-4e78-c690-f6a882a78c8c"
      },
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "3\n",
            "2\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "not enough values to unpack (expected 3, got 1)",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-4-8666d9114b22>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0m_\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mt\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0mdepth\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m  \u001b[0;31m# initially, nothing is dug\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: not enough values to unpack (expected 3, got 1)"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "G6eGcUgu9hav"
      },
      "source": [
        "Start with arry"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5PDg7hZE9kXO",
        "outputId": "2a074781-8641-4b29-aefd-82bd1ccad212"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[1, 4, 6, 7, 8]\n",
            "[1, 4, 6, 7, 8, 5]\n",
            "[1, 4, 100, 6, 7, 8, 5]\n"
          ]
        }
      ],
      "source": [
        "arr = [1 , 4 , 6 , 7, 8]\n",
        "print(arr)\n",
        "arr.append(5)\n",
        "print(arr)\n",
        "arr.insert(2, 100)\n",
        "print(arr)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WWZb3wI8P2Y4"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SrWs3UrcP9Hm",
        "outputId": "3fe0a455-5bd3-45f6-beb5-d3a1ea03096c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "3\n",
            "5\n",
            "8\n",
            "2\n",
            "15\n"
          ]
        }
      ],
      "source": [
        "a = int(input())\n",
        "b = int(input())\n",
        "\n",
        "print(a+b)\n",
        "print(b-a)\n",
        "print(a*b)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uKmNL9q5ofiH"
      },
      "outputs": [],
      "source": [
        "#https://leetcode.com/problems/convert-the-temperature/\n",
        "class Solution:\n",
        "    def convertTemperature(self, celsius: float) -> List[float]:\n",
        "        k = celsius + 273.15\n",
        "        f = celsius * 1.80 + 32.00\n",
        "        value = [k, f]\n",
        "        return value"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iC3dom82TzH8"
      },
      "outputs": [],
      "source": [
        "#https://www.hackerrank.com/challenges/whats-your-name/problem?isFullScreen=true\n",
        "def print_full_name(first, last):\n",
        "    # Write your code here\n",
        "    print(f\"Hello {first} {last}! You just delved into python. \")\n",
        "    return\n",
        "if __name__ == '__main__':"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Sp5bb8m7p4Af",
        "outputId": "93b16ce0-a3f0-409e-f618-61a7f41b1581"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "l\n",
            "r\n",
            "llo, \n",
            "Hello\n",
            "llo, World\n",
            ",ol\n",
            "dlroW ,olleH\n",
            "Hlo ol\n"
          ]
        }
      ],
      "source": [
        "b = \"Hello, World\"\n",
        "print(b[2])\n",
        "print(b[-3])\n",
        "print(b[2:-5])\n",
        "print(b[:5])\n",
        "print(b[2:])\n",
        "print(b[5:2:-1])\n",
        "print(b[::-1])\n",
        "print(b[::2] )"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GnEmqgYExKtn",
        "outputId": "eddf966f-c90a-4e28-d86f-28d60b3c8636"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            ",\n",
            "d\n",
            "ello, World!\n",
            "d!\n"
          ]
        }
      ],
      "source": [
        "s = \"Hello, World!\"\n",
        "print(s[5]) # ,\n",
        "print(s[-2]) # d\n",
        "print(s[1:]) # ello, world\n",
        "print(s[-2:]) # d"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "bjhQBXqx_6bm"
      },
      "outputs": [],
      "source": [
        "class Solution:\n",
        "    def isPalindrome(self, x: int) -> bool:\n",
        "        if x[0:] == x[::-1]:\n",
        "            return true\n",
        "        else:\n",
        "            return false\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "47rKcRE5ZYEP"
      },
      "outputs": [],
      "source": [
        "def swap_case(s):\n",
        "    x = s.swapcase()\n",
        "    return x\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    s = input()\n",
        "    result = swap_case(s)\n",
        "    print(result)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jU44r6YeF13S"
      },
      "outputs": [],
      "source": [
        "def split_and_join(line):\n",
        "    # write your code here\n",
        "    l = line.split()\n",
        "    line =\"-\".join(l)\n",
        "\n",
        "    return line\n",
        "if __name__ == '__main__':\n",
        "    line = input()\n",
        "    result = split_and_join(line)\n",
        "    print(result)"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMABGrJ+17BYb5PV7M6uixc",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
